generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  enrollments   Enrollment[]
  invoices      Invoice[]
  payments      Payment[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  price       Float
    thumbnail   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  enrollments Enrollment[]
  lessons     Lesson[]
  payments    Payment[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String
  courseId  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  payment    Payment?

  @@unique([userId, courseId])
}

model Payment {
  id                String     @id @default(cuid())
  amount            Float
  currency          String
  status            String
  paymentMethod     String
  razorpayPaymentId String?
  razorpayOrderId   String?    @unique
  razorpaySignature String?
  userId            String
  courseId          String
  enrollmentId      String     @unique
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  invoice           Invoice?
  course            Course     @relation(fields: [courseId], references: [id])
  enrollment        Enrollment @relation(fields: [enrollmentId], references: [id])
  user              User       @relation(fields: [userId], references: [id])
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  userId        String
  paymentId     String   @unique
  amount        Float
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  payment       Payment  @relation(fields: [paymentId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}
